-- MySQL Script generated by MySQL Workbench
-- Thu Aug  8 20:49:39 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Livraria
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Livraria
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Livraria` DEFAULT CHARACTER SET utf8 ;
USE `Livraria` ;

-- -----------------------------------------------------
-- Table `Livraria`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Livraria`.`clientes` ;

CREATE TABLE IF NOT EXISTS `Livraria`.`clientes` (
  `idclientes` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(30) NOT NULL,
  `telefone` VARCHAR(15) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `cidade` VARCHAR(15) NOT NULL,
  `clientescol` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idclientes`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Livraria`.`livros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Livraria`.`livros` ;

CREATE TABLE IF NOT EXISTS `Livraria`.`livros` (
  `idlivros` INT NOT NULL AUTO_INCREMENT,
  `valor` DECIMAL(10,2) NOT NULL,
  `descricao` VARCHAR(30) NOT NULL,
  `tipo_livro` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`idlivros`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Livraria`.`vendedor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Livraria`.`vendedor` ;

CREATE TABLE IF NOT EXISTS `Livraria`.`vendedor` (
  `idvendedor` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`idvendedor`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Livraria`.`vendas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Livraria`.`vendas` ;

CREATE TABLE IF NOT EXISTS `Livraria`.`vendas` (
  `idvendas` INT NOT NULL AUTO_INCREMENT,
  `data_venda` DATETIME NOT NULL,
  `clientes_idclientes` INT NOT NULL,
  `vendedor_idvendedor` INT NOT NULL,
  PRIMARY KEY (`idvendas`),
  INDEX `fk_livros_vendidos_clientes1_idx` (`clientes_idclientes`),
  INDEX `fk_vendas_vendedor1_idx` (`vendedor_idvendedor`),
  CONSTRAINT `fk_livros_vendidos_clientes1`
    FOREIGN KEY (`clientes_idclientes`)
    REFERENCES `Livraria`.`clientes` (`idclientes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vendas_vendedor1`
    FOREIGN KEY (`vendedor_idvendedor`)
    REFERENCES `Livraria`.`vendedor` (`idvendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Livraria`.`vendas_has_livros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Livraria`.`vendas_has_livros` ;

CREATE TABLE IF NOT EXISTS `Livraria`.`vendas_has_livros` (
  `vendas_idvendas` INT NOT NULL,
  `livros_idlivros` INT NOT NULL,
  `quantidade` INT NULL,
  PRIMARY KEY (`vendas_idvendas`, `livros_idlivros`),
  INDEX `fk_vendas_has_livros_livros1_idx` (`livros_idlivros`),
  INDEX `fk_vendas_has_livros_vendas1_idx` (`vendas_idvendas`),
  CONSTRAINT `fk_vendas_has_livros_vendas1`
    FOREIGN KEY (`vendas_idvendas`)
    REFERENCES `Livraria`.`vendas` (`idvendas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vendas_has_livros_livros1`
    FOREIGN KEY (`livros_idlivros`)
    REFERENCES `Livraria`.`livros` (`idlivros`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- ** ELIMINAR UMA COLUNA (CAMPO) DE UMA TABELA
 ALTER TABLE clientes DROP COLUMN clientescol ;

-- ---------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------
-- ** ADICIONANDO ALGUNS CLIENTES AO BANCO

-- INSERT INTO clientes (nome, telefone, email, cidade)
	-- VALUES ('Alan','61-9-9283-6947','alan@alan','Planaltina-DF'),
-- 		 	('Wellen','61-9-9284-6647','wrs@alan','Planaltina-DF'),
--             ('Evani','61-9-9283-6942','els@alan','Formosa-DF'),
--             ('Diana','61-9-8183-6900','das@alan','Ceilândia-DF'),
--             ('Welington','61-9-9283-6905','wcs@alan','Formosa-DF'),
--             ('Cristiano Ronaldo','61-9-9255-6947','cras@alan','Asa Norte-DF'),
--             ('Ronaldinho Gaúcho','61-9-9125-6947','ram@alan','Lago Sul-DF'),
--             ('Gabigol','61-9-9283-5597','gbs@alan','Asa sul-DF');
-- -----------------------------------------------------------------------------------------
-- ------------------------------------------------------------------------------------------
-- ** INSERINDO DADOS DOS LIVROS 

-- INSERT INTO livros (valor, descricao, tipo_livro) 
-- 	VALUES (39.90, '1984', 'Distopia'),
-- 			(49.90, 'O Senhor dos Anéis', 'Fantasia'),
-- 			(29.90, 'Dom Casmurro', 'Clássico'),
-- 			(59.90, 'A Guerra dos Tronos', 'Fantasia'),
-- 			(24.90, 'O Pequeno Príncipe', 'Fábula'),
-- 			(34.90, 'Orgulho e Preconceito', 'Romance'),
-- 			(19.90, 'O Alquimista', 'Ficção'),
-- 			(44.90, 'Cem Anos de Solidão', 'Realismo Mágico'),
-- 			(54.90, 'A Revolução dos Bichos', 'Satira'),
-- 			(39.90, 'O Morro dos Ventos Uivantes', 'Romance');
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
-- ** INSERINDO O ID DOS VENDEDORES. COLOQUEI 3
-- INSERT INTO vendedor () VALUES () ;
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
-- ** INSERINDO AS VENDAS COM AS DATAS, COMPRAS DOS CLIENTES E O ID DO VENDEDOR
-- INSERT INTO vendas (data_venda, clientes_idclientes, vendedor_idvendedor)
--  	 VALUES ('2024-07-21 13:01:25', 1 , 1 ),
--  			('2024-07-21 14:51:29', 2 , 2 ),
-- 		 	    ('2024-07-21 15:55:14', 3 , 3 ),
--  			('2024-07-21 13:39:47', 4 , 1 ),
--              ('2024-07-21 15:03:00', 5 , 2 ),
--              ('2024-07-21 12:17:19', 6 , 3 ),
--              ('2024-07-21 17:11:55', 7 , 1 ),
--              ('2024-07-21 15:33:54', 8 , 2 );
-- ---------------------------------------------------------------------------
-- ---------------------------------------------------------------------------
-- ** INSERINDO AS VENDAS REALIZADAS E A QUANTIDADE
-- INSERT INTO vendas_has_livros (vendas_idvendas, livros_idlivros, quantidade)
-- 	VALUES  (1, 1, 2),
-- 			(2, 2, 4),
--          (3, 3, 2),
-- 	 		(4, 4, 1),
--          (5, 5, 3),
--          (6, 6, 2),
--          (7, 7, 1),
--          (8, 8, 7);
-- --------------------------------------------------------------------------------
-- --------------------------------------------------------------------------------
--  ** LISTE TODOS OS CLIENTES E SUAS RESPECTIVAS VENDAS
-- SELECT c.nome, l.descricao AS titulo_livro
-- FROM vendas AS v
-- INNER JOIN clientes AS c ON v.clientes_idclientes = c.idclientes
-- INNER JOIN vendas_has_livros AS vhl ON v.idvendas = vhl.vendas_idvendas
-- INNER JOIN livros AS l ON vhl.livros_idlivros = l.idlivros;
-- -------------------------------------------------------------------------------
-- -------------------------------------------------------------------------------
--  **LISTE TODAS AS VENDAS REALIZADAS EM UMA DATA ESPECÍFICA
-- SELECT * FROM vendas
-- 	WHERE data_venda = '2024-07-31 20:02:00' ;
-- ---------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------
-- **LISTE TODOS OS LIVROS E SEUS PREÇOS
-- SELECT * FROM livros ;
-- ---------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------
-- **LISTE TODOS OS CLIENTES E SEUS E-MAILS
-- SELECT nome, email FROM clientes ; 
-- ----------------------------------------------------------------------------------
-- ----------------------------------------------------------------------------------
-- **LISTE TODAS AS VENDAS E A DATA CORRESPONDENTE
-- SELECT idvendas, data_venda FROM vendas ;
-- -----------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------
-- **LISTE TODOS OS LIVROS E A QUANTIDADE VENDIDA EM CADA VENDA
--   SELECT l.descricao, vh.quantidade
--  	FROM livros AS l
--      JOIN vendas_has_livros AS vh ON l.idlivros = vh.livros_idlivros ;
-- -------------------------------------------------------------------------------------
-- ------------------------------------------------------------------------------------
-- **ENCONTRE O TOTAL DE VENDAS (SOMA DE TODAS AS QUANTIDADES) PARA UM LIVRO ESPECÍFICO
-- SELECT l.descricao, SUM(vh.quantidade) AS Total_Vendas
-- FROM livros AS l
-- JOIN vendas_has_livros AS vh ON l.idlivros = vh.livros_idlivros
-- WHERE l.idlivros = 5
-- GROUP BY l.descricao ;
-- -----------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------
-- ENCONTRE O NÚMERO DE VENDAS REALIZADAS POR CADA CLIENTE
-- SELECT clientes.nome AS cliente, livros.descricao AS livro
-- FROM clientes
-- JOIN vendas ON clientes.idclientes = vendas.clientes_idclientes
-- JOIN vendas_has_livros ON vendas.idvendas = vendas_has_livros.vendas_idvendas
-- JOIN livros ON vendas_has_livros.livros_idlivros = livros.idlivros;
-- -------------------------------------------------------------------------------------------
-- -------------------------------------------------------------------------------------------
 -- LISTE TODAS AS VENDAS E O NÚMERO DE ITENS VENDIDOS EM CADA VENDA
-- SELECT vendas.idvendas AS venda_id, COUNT(vendas_has_livros.livros_idlivros) AS numero_de_itens
-- 	 FROM vendas
-- 	JOIN vendas_has_livros ON vendas.idvendas = vendas_has_livros.vendas_idvendas
-- 	GROUP BY vendas.idvendas;
-- --------------------------------------------------------------------------------------------
-- --------------------------------------------------------------------------------------------
-- ENCONTRE O LIVRO MAIS CARO 
-- SELECT descricao, valor
--  	FROM livros
--      WHERE valor = (SELECT MAX(valor) FROM livros) ;
-- ----------------------------------------------------------------------------------------------
-- ----------------------------------------------------------------------------------------------
-- CALCULE O VALOR TOTAL DE CADA VENDA
-- SELECT vendas.idvendas AS venda_id, SUM(vendas_has_livros.quantidade * livros.valor) AS valor_total
-- FROM vendas
-- JOIN vendas_has_livros ON vendas.idvendas = vendas_has_livros.vendas_idvendas
-- JOIN livros ON vendas_has_livros.livros_idlivros = livros.idlivros
-- GROUP BY vendas.idvendas;